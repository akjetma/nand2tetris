// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // RAM:       lo: 000000000000000
    //            hi: 011111111111111
    //
    // Screen:    lo: 100000000000000
    //            hi: 101111111111111
    //
    // Keyboard:  xx: 110000000000000
    //
    // Undefined: lo: 110000000000001
    //            hi: 111111111111111
    
    // If 'load' is set and the high bit of 'address' is also set,
    // assume we are loading into the Screen mmap. This is the
    // only defined behavior when these two conditions are true.
    DMux(in=load, sel=address[14], a=loadRAM, b=loadScreen);

    // Drop the highest bit of address when reading from RAM. If an
    // address beyond these first 14 bits is being accessed, RAMOut
    // will be junk that is discarded later.
    RAM16K(in=in, address=address[0..13], load=loadRAM, out=RAMOut);

    // Drop the two highest bits of address when reading from Screen.
    Screen(in=in, address=address[0..12], load=loadScreen, out=screenOut);
    
    Keyboard(out=keyboardOut);

    // The two highest bits indicate which register is being 
    // read/written. 
    // [0,0] and [0,1] -> RAM
    // [1,0] -> Screen
    // [1,1] -> Keyboard (or undefined)
    // Working on an address above 0x6000 is undefined behavior. In
    // This case we just return keyboardOut...
    // This would be maddening in real life.
    Mux4Way16(sel=address[13..14], out=out,
    a=RAMOut, b=RAMOut, c=screenOut, d=keyboardOut);
}
