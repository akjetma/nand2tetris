// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        
        // Negate the inputs
        
        Not16 (in=x, out=notx);
        Not16 (in=y, out=noty);
        

        // 'xSel' (selected x) initially takes on one of four values 
        // based on 'zx' and 'nx':
        // 1. zx=0, nx=0 : x          : identity
        // 2. zx=0, nx=1 : !x         : bitwise not
        // 3. zx=1, nx=0 : 0[16] (0)  : 0000...
        // 4. zx=1, nx=1 : 1[16] (-1) : 1111...

        Mux4Way16 (a=x, b=notx, c=false, d=true, sel[0]=nx, sel[1]=zx, out=xSel);


        // The same is true for 'ySel':

        Mux4Way16 (a=y, b=noty, c=false, d=true, sel[0]=ny, sel[1]=zy, out=ySel);
        

        // 'xSel' and 'ySel' can be combined in one of two ways based on 'f':
        // 1. f=0 : xSel & ySel : bitwise and
        // 2. f=1 : xSel + ySel : addition
        
        And16 (a=xSel, b=ySel, out=xAndy);
        Add16 (a=xSel, b=ySel, out=xPlusy);
        
        Mux16 (a=xAndy, b=xPlusy, sel=f, out=xWithy);
        

        // 'xWithy' is then bit-flipped if 'no' is true:
        // 1. no=0 : xWithy  : identity
        // 2. no-1 : !xWithy : bitwise not

        Not16 (in=xWithy, out=notxWithy);


        // We destructure the output into two 8-bit buses to help with determining the
        // sign (-/+) of the output later.

        Mux16 (a=xWithy, b=notxWithy, sel=no, out[0..7]=out0to7, out[8..15]=out8to15);


        // Computing Or on the latter (larger) 8 bits of the 16 bit output indicates
        // the sign of the output. If any digit in the latter 8 bits is 1, the output
        // is negative. It's also useful later when determining whether the output
        // is zero. If there is a 1 in either half of the output, the output is nonzero

        Or8Way (in=out8to15, out=outIsNegative);


        // Send the output to 'ng' using And as an identity/no-op transformation.

        And (a=outIsNegative, b=outIsNegative, out=ng);

        
        // Computing Or on the first (smaller) 8 bits tells us (when combined with the
        // result of outIsNegative via another Or) whether the output is nonzero. We
        // then 'not' the output and send to the zr output.

        Or8Way (in=out0to7, out=outCantBeZero);
        
        Or (a=outIsNegative, b=outCantBeZero, out=outIsNonZero);
        
        Not (in=outIsNonZero, out=zr);

                
        // Recombine the two halves of the output back into a single 16 bit bus
        // using bitwise Or with a bus of zeros as a passthrough.
        
        Or16(a[0..7]=out0to7, a[8..15]=out8to15, b=false, out=out);
}
