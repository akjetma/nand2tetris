// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset==1) or continue executing
                       // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

 PARTS:
  // internal parts:
  //
  // ALU(x[16], y[16], zx, nx, zy, ny, f, no,
  //    out[16], zr, ng)
  //
  // ARegister(in[16], load, 
  //    out[16])
  //
  // DRegister(in[16], load,
  //    out[16])
  //
  // PC(in[16], load, inc, reset,
  //    out[16])
        
  // i xx a cccccc ddd jjj
        
  Or16(a=instruction, b=false, 
       out[15] = i, 
       out[12] = a,
       out[11] = zx, 
       out[10] = nx, 
       out[9]  = zy, 
       out[8]  = ny, 
       out[7]  = f, 
       out[6]  = no, 
       out[5]  = seta, 
       out[4]  = setd, 
       out[3]  = setm, 
       out[2]  = jlt,
       out[1]  = jeq,
       out[0]  = jgt);

  Mux16(a=instruction, b=ALUout, 
        sel=i, 
        out=instructionOrALUout);

  Not(in=i, 
      out=instructionTypeA);

  Or(a=instructionTypeA, b=seta, 
     out=loadA);
        
  ARegister(in=instructionOrALUout, 
            load=loadA, 
            out=A);

  Mux16(a=A, b=inM, 
        sel=a, 
        out=AorM);

  Or16(a=A, b=false, 
       out[0..14]=addressM);

  PC(in=A, 
     reset=reset, 
     load=loadPC, inc=true,
     out[0..14]=pc);

  ALU(x=D, y=AorM, 
      zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
      out=ALUout, 
      zr=ALUzr, ng=ALUng);

  Not(in=ALUng, 
      out=ALUpos);

  Not(in=ALUzr, 
      out=ALUnzr);

  And(a=ALUpos, b=ALUnzr, 
      out=ALUactuallyPos);

  And(a=ALUng, b=jlt, 
      out=jumpLT);

  And(a=ALUzr, b=jeq, 
      out=jumpEQ);

  And(a=ALUactuallyPos, b=jgt, 
      out=jumpGT);

  Or(a=jumpLT, b=jumpEQ, 
     out=jumpTemp);

  Or(a=jumpTemp, b=jumpGT, 
     out=jumpTemp2);

  And(a=i, b=jumpTemp2, 
      out=loadPC);

  Or16(a=ALUout, b=false, 
       out=outM);

  And(a=i, b=setm, 
      out=writeM);

  And(a=i, b=setd, 
      out=writeD);

  DRegister(in=ALUout, 
            load=writeD, 
            out=D);
}
